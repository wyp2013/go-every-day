// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simplecache.proto

package simplecache

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type CacheRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Set                  bool     `protobuf:"varint,2,opt,name=set,proto3" json:"set,omitempty"`
	DefaultValue         string   `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheRequest) Reset()         { *m = CacheRequest{} }
func (m *CacheRequest) String() string { return proto.CompactTextString(m) }
func (*CacheRequest) ProtoMessage()    {}
func (*CacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc1a6bc74cabbcf8, []int{0}
}

func (m *CacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheRequest.Unmarshal(m, b)
}
func (m *CacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheRequest.Marshal(b, m, deterministic)
}
func (m *CacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheRequest.Merge(m, src)
}
func (m *CacheRequest) XXX_Size() int {
	return xxx_messageInfo_CacheRequest.Size(m)
}
func (m *CacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CacheRequest proto.InternalMessageInfo

func (m *CacheRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CacheRequest) GetSet() bool {
	if m != nil {
		return m.Set
	}
	return false
}

func (m *CacheRequest) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

// The response message containing the greetings
type CacheReply struct {
	Set                  int32    `protobuf:"varint,1,opt,name=set,proto3" json:"set,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheReply) Reset()         { *m = CacheReply{} }
func (m *CacheReply) String() string { return proto.CompactTextString(m) }
func (*CacheReply) ProtoMessage()    {}
func (*CacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc1a6bc74cabbcf8, []int{1}
}

func (m *CacheReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheReply.Unmarshal(m, b)
}
func (m *CacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheReply.Marshal(b, m, deterministic)
}
func (m *CacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheReply.Merge(m, src)
}
func (m *CacheReply) XXX_Size() int {
	return xxx_messageInfo_CacheReply.Size(m)
}
func (m *CacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_CacheReply proto.InternalMessageInfo

func (m *CacheReply) GetSet() int32 {
	if m != nil {
		return m.Set
	}
	return 0
}

func (m *CacheReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*CacheRequest)(nil), "simplecache.CacheRequest")
	proto.RegisterType((*CacheReply)(nil), "simplecache.CacheReply")
}

func init() { proto.RegisterFile("simplecache.proto", fileDescriptor_cc1a6bc74cabbcf8) }

var fileDescriptor_cc1a6bc74cabbcf8 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xce, 0xcc, 0x2d,
	0xc8, 0x49, 0x4d, 0x4e, 0x4c, 0xce, 0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x0a, 0xe5, 0xe2, 0x71, 0x06, 0x31, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x98, 0x32, 0x53, 0x84,
	0x04, 0xb8, 0x98, 0x8b, 0x53, 0x4b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82, 0x40, 0x4c, 0x21,
	0x65, 0x2e, 0xde, 0x94, 0xd4, 0xb4, 0xc4, 0xd2, 0x9c, 0x92, 0xf8, 0xb2, 0xc4, 0x9c, 0xd2, 0x54,
	0x09, 0x66, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x1e, 0xa8, 0x60, 0x18, 0x48, 0x4c, 0xc9, 0x84, 0x8b,
	0x0b, 0x6a, 0x6c, 0x41, 0x4e, 0x25, 0xcc, 0x10, 0x88, 0xa9, 0x60, 0x43, 0x44, 0xb8, 0x58, 0x21,
	0x9a, 0x99, 0xc0, 0x9a, 0x21, 0x1c, 0x23, 0x7f, 0x2e, 0xee, 0x60, 0xb0, 0xdb, 0xc0, 0x7a, 0x85,
	0x1c, 0xb8, 0x38, 0xdc, 0x53, 0x21, 0x06, 0x0a, 0x49, 0xea, 0x21, 0x7b, 0x04, 0xd9, 0xc9, 0x52,
	0xe2, 0xd8, 0xa4, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x3e, 0x36, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xed, 0x1f, 0x06, 0x02, 0x06, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleCacheClient is the client API for SimpleCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleCacheClient interface {
	GetValue(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheReply, error)
}

type simpleCacheClient struct {
	cc *grpc.ClientConn
}

func NewSimpleCacheClient(cc *grpc.ClientConn) SimpleCacheClient {
	return &simpleCacheClient{cc}
}

func (c *simpleCacheClient) GetValue(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheReply, error) {
	out := new(CacheReply)
	err := c.cc.Invoke(ctx, "/simplecache.SimpleCache/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleCacheServer is the server API for SimpleCache service.
type SimpleCacheServer interface {
	GetValue(context.Context, *CacheRequest) (*CacheReply, error)
}

// UnimplementedSimpleCacheServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleCacheServer struct {
}

func (*UnimplementedSimpleCacheServer) GetValue(ctx context.Context, req *CacheRequest) (*CacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}

func RegisterSimpleCacheServer(s *grpc.Server, srv SimpleCacheServer) {
	s.RegisterService(&_SimpleCache_serviceDesc, srv)
}

func _SimpleCache_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleCacheServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplecache.SimpleCache/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleCacheServer).GetValue(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simplecache.SimpleCache",
	HandlerType: (*SimpleCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _SimpleCache_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simplecache.proto",
}
