// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubsub.proto

package pubsub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PubRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	TopicType            int32    `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubRequest) Reset()         { *m = PubRequest{} }
func (m *PubRequest) String() string { return proto.CompactTextString(m) }
func (*PubRequest) ProtoMessage()    {}
func (*PubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{0}
}

func (m *PubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubRequest.Unmarshal(m, b)
}
func (m *PubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubRequest.Marshal(b, m, deterministic)
}
func (m *PubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRequest.Merge(m, src)
}
func (m *PubRequest) XXX_Size() int {
	return xxx_messageInfo_PubRequest.Size(m)
}
func (m *PubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubRequest proto.InternalMessageInfo

func (m *PubRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubRequest) GetTopicType() int32 {
	if m != nil {
		return m.TopicType
	}
	return 0
}

type PubReply struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Errno                int32    `protobuf:"varint,2,opt,name=errno,proto3" json:"errno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubReply) Reset()         { *m = PubReply{} }
func (m *PubReply) String() string { return proto.CompactTextString(m) }
func (*PubReply) ProtoMessage()    {}
func (*PubReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{1}
}

func (m *PubReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubReply.Unmarshal(m, b)
}
func (m *PubReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubReply.Marshal(b, m, deterministic)
}
func (m *PubReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubReply.Merge(m, src)
}
func (m *PubReply) XXX_Size() int {
	return xxx_messageInfo_PubReply.Size(m)
}
func (m *PubReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PubReply.DiscardUnknown(m)
}

var xxx_messageInfo_PubReply proto.InternalMessageInfo

func (m *PubReply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PubReply) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

type SubRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	TopicType            int32    `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}
func (*SubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{2}
}

func (m *SubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubRequest.Unmarshal(m, b)
}
func (m *SubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubRequest.Marshal(b, m, deterministic)
}
func (m *SubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRequest.Merge(m, src)
}
func (m *SubRequest) XXX_Size() int {
	return xxx_messageInfo_SubRequest.Size(m)
}
func (m *SubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubRequest proto.InternalMessageInfo

func (m *SubRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubRequest) GetTopicType() int32 {
	if m != nil {
		return m.TopicType
	}
	return 0
}

type SubReply struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Errno                int32    `protobuf:"varint,2,opt,name=errno,proto3" json:"errno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubReply) Reset()         { *m = SubReply{} }
func (m *SubReply) String() string { return proto.CompactTextString(m) }
func (*SubReply) ProtoMessage()    {}
func (*SubReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{3}
}

func (m *SubReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubReply.Unmarshal(m, b)
}
func (m *SubReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubReply.Marshal(b, m, deterministic)
}
func (m *SubReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubReply.Merge(m, src)
}
func (m *SubReply) XXX_Size() int {
	return xxx_messageInfo_SubReply.Size(m)
}
func (m *SubReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubReply proto.InternalMessageInfo

func (m *SubReply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SubReply) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func init() {
	proto.RegisterType((*PubRequest)(nil), "pubsub.PubRequest")
	proto.RegisterType((*PubReply)(nil), "pubsub.PubReply")
	proto.RegisterType((*SubRequest)(nil), "pubsub.SubRequest")
	proto.RegisterType((*SubReply)(nil), "pubsub.SubReply")
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor_91df006b05e20cf7) }

var fileDescriptor_91df006b05e20cf7 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0x4d, 0x2a,
	0x2e, 0x4d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x1c, 0xb8, 0xb8,
	0x02, 0x4a, 0x93, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x4b, 0xf2,
	0x0b, 0x32, 0x93, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x19, 0x2e, 0x4e,
	0x30, 0x23, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x35, 0x08, 0x21, 0xa0, 0x64,
	0xc5, 0xc5, 0x01, 0x36, 0xa1, 0x20, 0xa7, 0x52, 0x48, 0x82, 0x8b, 0x3d, 0x39, 0x3f, 0xaf, 0x24,
	0x35, 0xaf, 0x04, 0x6a, 0x02, 0x8c, 0x0b, 0x32, 0x39, 0xb5, 0xa8, 0x28, 0x2f, 0x1f, 0xaa, 0x1f,
	0xc2, 0x01, 0xd9, 0x1e, 0x4c, 0xb1, 0xed, 0xc1, 0x64, 0xda, 0x6e, 0x54, 0xc7, 0xc5, 0x1b, 0x00,
	0x0e, 0x85, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x43, 0x2e, 0xf6, 0x80, 0xd2, 0xa4,
	0x9c, 0xcc, 0xe2, 0x0c, 0x21, 0x21, 0x3d, 0x68, 0x70, 0x21, 0x42, 0x47, 0x4a, 0x00, 0x45, 0xac,
	0x20, 0xa7, 0x52, 0x89, 0x41, 0xc8, 0x8a, 0x8b, 0x2f, 0xb8, 0x34, 0xa9, 0x38, 0xb9, 0x28, 0x33,
	0x29, 0x35, 0x04, 0xec, 0x5e, 0xb8, 0xce, 0x60, 0x2c, 0x3a, 0x83, 0xe1, 0x3a, 0x0d, 0x18, 0x93,
	0xd8, 0xc0, 0x51, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xff, 0x13, 0xe2, 0x5d, 0x9a, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubsubServiceClient is the client API for PubsubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubsubServiceClient interface {
	Publish(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubReply, error)
	SubscribeTopic(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (PubsubService_SubscribeTopicClient, error)
}

type pubsubServiceClient struct {
	cc *grpc.ClientConn
}

func NewPubsubServiceClient(cc *grpc.ClientConn) PubsubServiceClient {
	return &pubsubServiceClient{cc}
}

func (c *pubsubServiceClient) Publish(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubReply, error) {
	out := new(PubReply)
	err := c.cc.Invoke(ctx, "/pubsub.PubsubService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubServiceClient) SubscribeTopic(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (PubsubService_SubscribeTopicClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubsubService_serviceDesc.Streams[0], "/pubsub.PubsubService/SubscribeTopic", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubServiceSubscribeTopicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubsubService_SubscribeTopicClient interface {
	Recv() (*SubReply, error)
	grpc.ClientStream
}

type pubsubServiceSubscribeTopicClient struct {
	grpc.ClientStream
}

func (x *pubsubServiceSubscribeTopicClient) Recv() (*SubReply, error) {
	m := new(SubReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubsubServiceServer is the server API for PubsubService service.
type PubsubServiceServer interface {
	Publish(context.Context, *PubRequest) (*PubReply, error)
	SubscribeTopic(*SubRequest, PubsubService_SubscribeTopicServer) error
}

// UnimplementedPubsubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPubsubServiceServer struct {
}

func (*UnimplementedPubsubServiceServer) Publish(ctx context.Context, req *PubRequest) (*PubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedPubsubServiceServer) SubscribeTopic(req *SubRequest, srv PubsubService_SubscribeTopicServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTopic not implemented")
}

func RegisterPubsubServiceServer(s *grpc.Server, srv PubsubServiceServer) {
	s.RegisterService(&_PubsubService_serviceDesc, srv)
}

func _PubsubService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.PubsubService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServiceServer).Publish(ctx, req.(*PubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubsubService_SubscribeTopic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubsubServiceServer).SubscribeTopic(m, &pubsubServiceSubscribeTopicServer{stream})
}

type PubsubService_SubscribeTopicServer interface {
	Send(*SubReply) error
	grpc.ServerStream
}

type pubsubServiceSubscribeTopicServer struct {
	grpc.ServerStream
}

func (x *pubsubServiceSubscribeTopicServer) Send(m *SubReply) error {
	return x.ServerStream.SendMsg(m)
}

var _PubsubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.PubsubService",
	HandlerType: (*PubsubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubsubService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTopic",
			Handler:       _PubsubService_SubscribeTopic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}
